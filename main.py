from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType

import time
import requests
import threading

import alert
import btns
import db
import text
from db import db_start

TOKEN = "5636715243:AAGoPgmHYLVPiUAEsLe5xQigPN8vCVQNQs8"

bot = Bot(token=TOKEN, parse_mode="html")
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


async def on_startup(_):
    await db_start()


class States(StatesGroup):
    city_list = State()
    maps_list = State()
    city_state_id = State()
    photo = State()
    ocup_geo = State()
    geo_bomb = State()
    send_state = State()
    description = State()


@dp.message_handler(Text(equals="–ü—É–Ω–∫—Ç –Ω–µ–∑–ª–∞–º–Ω–æ—Å—Ç—ñ ‚ö°Ô∏è"), state="*")
async def phone(message: types.Message):
    if message.text == "–ü—É–Ω–∫—Ç –Ω–µ–∑–ª–∞–º–Ω–æ—Å—Ç—ñ ‚ö°Ô∏è":
        nezlam = await db.city_get(user_id=message.from_user.id)
        await bot.send_message(message.from_user.id, text.city_text.get(nezlam))


@dp.message_handler(Text(equals="–¢—Ä–∏–≤–æ–≥–∞ üîà"), state="*")
async def back(message: types.Message):
    if message.text == "–¢—Ä–∏–≤–æ–≥–∞ üîà":
        keyboard_aid = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_injury = types.KeyboardButton(text="–°—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ ‚è∞")
        button_bad = types.KeyboardButton(text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üí¨")
        button_menu = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚óÄÔ∏è")
        keyboard_aid.add(button_bad, button_injury, button_menu)
        await bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.",
                               reply_markup=keyboard_aid)


@dp.message_handler(Text(equals="–°—Ç–∞–Ω —Ç—Ä–∏–≤–æ–≥–∏ ‚è∞"), state="*")
async def back(message: types.Message):
    keyboard_map = types.InlineKeyboardMarkup()
    ban_button = types.InlineKeyboardButton(text="–ú–∞–ø–∞ —Ç—Ä–∏–≤–æ–≥", url="https://alerts.in.ua/")
    keyboard_map.add(ban_button)
    city_req_id = requests.get(alert.link.format(city_id=await db.city_get(user_id=message.from_user.id)),
                               headers=alert.headers)
    if "false" in city_req_id.text:
        await bot.send_message(message.from_user.id,
                               "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—è. –î–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                               reply_markup=keyboard_map)
    else:
        await bot.send_message(message.from_user.id, "–í –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞! –ù–µ–≥–∞–π–Ω–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ "
                                                     "–Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è. –î–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                               reply_markup=keyboard_map)


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥ ‚óÄÔ∏è"), state="*")
async def back(message: types.Message):
    if message.text == "–ù–∞–∑–∞–¥ ‚óÄÔ∏è":
        await bot.send_message(message.from_user.id, "–í–∏ –ø–æ–≤–µ–Ω—É–ª–∏—Å—è –Ω–∞–∑–∞–¥.", reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚óÄÔ∏è"), state="*")
async def back(message: types.Message):
    if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚óÄÔ∏è":
        await bot.send_message(message.from_user.id, "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –º–µ–Ω—é.", reply_markup=btns.keyboard_plt)
        await States.geo_bomb.set()


async def send_to_admin(user_id, photo_data, geo_lat_data, geo_long_data, description_data):
    keyboard_ban = types.InlineKeyboardMarkup()
    ban_button = types.InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ üîí", callback_data=f"ban:{user_id}")
    unban_button = types.InlineKeyboardButton(text="–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ üîì", callback_data=f"unban:{user_id}")
    deldat_button = types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç–∏ üóë", callback_data=f"deldata:{user_id}")
    send_button = types.InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ", callback_data=f"sendmessage:{user_id}")
    keyboard_ban.add(ban_button, unban_button, deldat_button, send_button)
    admin_id = 5517129511
    lat = geo_lat_data
    long = geo_long_data
    dsc = description_data
    await bot.send_photo(chat_id=admin_id, photo=photo_data,
                         caption=f"User ID: {user_id}\n\n–ü–æ–ª–æ–∂–µ–Ω–Ω—è –æ–∫—É–ø–∞–Ω—Ç—ñ–≤ –∑–∞:\n–î–æ–≤–≥–æ—Ç–æ—é: {lat} \n–®–∏—Ä–æ—Ç–æ—é: {long} \n\n–û–ø–∏—Å: {dsc}",
                         reply_markup=keyboard_ban)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('sendmessage:'))
async def send_user(callback_query: types.CallbackQuery):
    _, user_id = callback_query.data.split(':')
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id, text="–î–∞–Ω–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. ‚úÖ")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deldata:'))
async def del_user(callback_query: types.CallbackQuery):
    _, user_id = callback_query.data.split(':')
    await db.photo_delete(user_id=user_id)
    await db.lat_delete(user_id=user_id)
    await db.long_delete(user_id=user_id)
    await db.description_delete(user_id=user_id)
    await db.del_profile(user_id=user_id)
    await bot.answer_callback_query(callback_query.id, text="–î–∞–Ω–Ω—ñ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ. üóë")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ban:'))
async def ban_user(callback_query: types.CallbackQuery):
    _, user_id = callback_query.data.split(':')
    await db.ban_user(user_id=user_id)
    await bot.answer_callback_query(callback_query.id, text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. üîí")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('unban:'))
async def unban_user(callback_query: types.CallbackQuery):
    _, user_id = callback_query.data.split(':')
    await db.unban_user(user_id=user_id)
    await bot.answer_callback_query(callback_query.id, text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π. üîì")


@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é ‚úÖ"), state="*")
async def back(message: types.Message):
    keyboard_ban = types.InlineKeyboardMarkup()
    ban_button = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏", url="https://t.me/Svidomiy_Admin")
    keyboard_ban.add(ban_button)
    user_id = message.from_user.id
    if db.is_banned(user_id):
        await bot.send_message(user_id, "–í–∏ –±—É–ª–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=keyboard_ban)
        return

    photo_data = await db.photo_get(user_id=user_id)
    geo_lat_data = await db.lat_get(user_id=user_id)
    geo_long_data = await db.long_get(user_id=user_id)
    description_data = await db.description_get(user_id=user_id)
    if not photo_data or not geo_lat_data or not geo_long_data or not description_data:
        await bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")
        return

    lat = geo_lat_data
    long = geo_long_data
    dsc = description_data

    await bot.send_photo(chat_id=user_id, photo=photo_data,
                         caption=f"–ü–æ–ª–æ–∂–µ–Ω–Ω—è –æ–∫—É–ø–∞–Ω—Ç—ñ–≤ –∑–∞:\n\n–î–æ–≤–≥–æ—Ç–æ—é: {lat} \n–®–∏—Ä–æ—Ç–æ—é: {long}\n\n –û–ø–∏—Å: {dsc}")
    reply = "–Ø–∫—â–æ –≤—Å—ñ –¥–∞–Ω–Ω—ñ –±—É–ª–∏ –≤–∫–∞–∑–∞–Ω–æ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–Ω–ø–∫—É: –ù–∞–¥—ñ—Å–ª–∞—Ç–∏"
    await message.answer(reply, reply_markup=btns.send)
    await States.send_state.set()


@dp.message_handler(Text(equals="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚úâÔ∏è"), state=States.send_state)
async def back(message: types.Message):
    if message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚úâÔ∏è":
        user_id = message.from_user.id
        photo_data = await db.photo_get(user_id=user_id)
        geo_lat_data = await db.lat_get(user_id=user_id)
        geo_long_data = await db.long_get(user_id=user_id)
        description_data = await db.description_get(user_id=user_id)
        await send_to_admin(user_id, photo_data, geo_lat_data, geo_long_data, description_data)
        await db.photo_delete(user_id=user_id)
        await db.lat_delete(user_id=user_id)
        await db.long_delete(user_id=user_id)
        await db.description_delete(user_id=user_id)
        await bot.send_message(message.chat.id, "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ. –î—è–∫—É—é –∑–∞ —Å–ø—ñ–ø—Ä–∞—Ü—é!",
                               reply_markup=btns.ocupant_menu)


@dp.message_handler(Text(equals="–í–∏–¥–∞–ª–∏—Ç–∏ üóë"), state=States.send_state)
async def back(message: types.Message):
    if message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ üóë":
        user_id = message.from_user.id
        await db.photo_delete(user_id=user_id)
        await db.lat_delete(user_id=user_id)
        await db.long_delete(user_id=user_id)
        await db.description_delete(user_id=user_id)
        await bot.send_message(message.chat.id, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.", reply_markup=btns.ocupant_menu)


@dp.message_handler(Text(equals="–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± ‚óÄÔ∏è"), state="*")
async def back(message: types.Message):
    if message.text == "–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± ‚óÄÔ∏è":
        await bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Å–ø–æ—Å—ñ–±:", reply_markup=btns.ocupant_menu)
        await message.delete()


@dp.message_handler(Text(equals="–û–∫—É–ø–∞–Ω—Ç ‚öî"), state="*")
async def phone(message: types.Message):
    if message.text == "–û–∫—É–ø–∞–Ω—Ç ‚öî" and await db.verif_profile(user_id=message.from_user.id) == "False":
        keyboard_phone = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω üìû", request_contact=True)
        keyboard_phone.add(button_phone, btns.button_menu)
        await bot.send_message(message.from_user.id,
                               '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ü—å–æ–≥–æ –º–µ–Ω—é –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å–≤–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é '
                               '–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω".',
                               reply_markup=keyboard_phone)
    else:
        await bot.send_message(message.chat.id, "–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ!", reply_markup=btns.ocupant_menu)


@dp.message_handler(Text(equals="–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é üì∑"), state="*")
async def back(message: types.Message):
    if message.text == "–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é üì∑":
        await States.photo.set()
        await bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–∫—É–ø–∞–Ω—Ç—ñ–≤:", reply_markup=btns.menu_ocup_back)


@dp.message_handler(Text(equals="–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç"), state="*")
async def back(message: types.Message):
    if message.text == "–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç":
        await States.ocup_geo.set()
        await bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ–∫—É–ø–∞–Ω—Ç—ñ–≤:", reply_markup=btns.ocupant_geo_sent)


@dp.message_handler(content_types=ContentType.PHOTO, state=States.photo)
async def photo(message: types.Message):
    await db.photo_add(user_id=message.from_user.id, photo=message.photo[0].file_id)
    await States.description.set()
    await bot.send_message(message.chat.id, "–î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–ª—è —Ñ–æ—Ç–æ:")


@dp.message_handler(state=States.description)
async def description(message: types.Message):
    await db.description_add(user_id=message.from_user.id, description=message.text)
    await bot.send_message(message.chat.id, "–í–∏ –ø—Ä–∏–∫—Ä—ñ–ø–∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=btns.ocupant_menu)


@dp.message_handler(content_types="location", state=States.ocup_geo)
async def ocup_geo(message: types.Message):
    geoloclat = message.location.latitude
    geoloclong = message.location.longitude
    await db.lat_add(user_id=message.from_user.id, geo_lat=geoloclat)
    await db.long_add(user_id=message.from_user.id, geo_long=geoloclong)
    await bot.send_message(message.chat.id, "–í–∏ –ø—Ä–∏–∫—Ä—ñ–ø–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.", reply_markup=btns.ocupant_menu)


@dp.message_handler(content_types=['contact'], state="*")
async def contact(message: types.Message, state: FSMContext, number=None) -> None:
    async with state.proxy() as data:
        data[number] = message.contact.phone_number
    keyboard_cnt = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard_cnt.add(btns.button_menu)
    if message.forward_from is not None:
        await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=keyboard_cnt)
    else:
        num = message.contact.phone_number
        await db.edit_profile(user_id=message.from_user.id, phone_number=num)
        if num.startswith(str("+380")) or num.startswith(str("380")):
            await bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–º–µ—Ä: {}.\n\n–î—è–∫—É—é –∑–∞ –ø—ñ–¥—Ç–≤—Ä–µ–¥–∂–µ–Ω—è —Å–≤–æ—î—ó –æ—Å–æ–±–∏! "
                                                    "–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ —Ç–∞ —Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ —Ç—ñ–ª—å–∫–∏ –≤ —Ç–æ–º—É —Ä–∞–∑—ñ —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ "
                                                    "–∑–∞–≥—Ä–æ–∂—É—î –≤–∞—à–æ–º—É –∂–∏—Ç—Ç—é!".format(num),
                                   reply_markup=btns.ocupant_menu)
            await db.change_profile(user_id=message.from_user.id)
        else:
            await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=keyboard_cnt)


@dp.message_handler(content_types=['location'], state=States.geo_bomb)
async def handle_location(message: types.Message):
    city_data = await db.city_get(user_id=message.from_user.id)
    maps_url = alert.maps_list.get(city_data)
    geobtn = InlineKeyboardButton(text="–ù–∞–π–±–ª–∏–∂—á–µ —É–∫—Ä–∏—Ç—Ç—è",
                                  url=maps_url.format(
                                      latt=message.location.latitude, long=message.location.longitude))
    geo = InlineKeyboardMarkup().add(geobtn)
    reply = "–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–µ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —è–∫–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∏–∂—á–µ."
    await message.answer(reply, reply_markup=geo)


@dp.message_handler(commands=['start'], state="*")
async def handle(message: types.Message) -> None:
    city = InlineKeyboardButton(text="–û–¥–µ—Å—å–∫–∞ –æ–±–ª.", callback_data="14")
    city1 = InlineKeyboardButton(text="–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="3")
    city2 = InlineKeyboardButton(text="–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="23")
    city3 = InlineKeyboardButton(text="–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="19")
    city4 = InlineKeyboardButton(text="–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª.", callback_data="5")
    city5 = InlineKeyboardButton(text="–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="15")
    city6 = InlineKeyboardButton(text="–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="20")
    city7 = InlineKeyboardButton(text="–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="9")
    next_btn = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="nextb")
    citichoose = InlineKeyboardMarkup(row_width=2).add(city, city1, city2, city3, city4, city5, city6, city7, next_btn)
    with open("photos/IMG_20230219_011909_687.jpg", 'rb') as logo:
        await bot.send_photo(chat_id=message.from_user.id, photo=logo,
                             caption=f"–í—ñ—Ç–∞—é –í–∞—Å —É –Ω–∞—à–æ–º—É —á–∞—Ç-–±–æ—Ç—ñ! –¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ —Ä—ñ–∑–Ω—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å "
                                     f"–≤–∞–º –ø—ñ–¥ —á–∞—Å –≤–æ—î–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É üá∫üá¶")
        reply = "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ: "
        await message.answer(reply, reply_markup=citichoose)
        await db.profile(user_id=message.from_user.id, verified="False")
        await message.delete()


@dp.message_handler(Text(equals="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üí¨"), state="*")
async def smstrivoga(message: types.Message):
    keyboard_ban = types.InlineKeyboardMarkup()
    on_button = types.InlineKeyboardButton(text="–í–∫–ª. üîî", callback_data="alert_on")
    off_button = types.InlineKeyboardButton(text="–í–∏–∫–ª. üîï", callback_data="alert_off")
    keyboard_ban.add(on_button, off_button)
    await bot.send_message(message.from_user.id,
                           "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç–∏ –∞–±–æ –≤–∫–ª—é—á–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ.",
                           reply_markup=keyboard_ban)


@dp.callback_query_handler(text="alert_on", state="*")
async def nextprs_btn(callback: types.CallbackQuery):
    await db.alert_on(user_id=callback.from_user.id)
    await bot.answer_callback_query(callback.id, text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤–∫–ª—é—á–µ–Ω–æ. üîî")


@dp.callback_query_handler(text="alert_off", state="*")
async def nextprs_btn(callback: types.CallbackQuery):
    await db.alert_off(user_id=callback.from_user.id)
    await bot.answer_callback_query(callback.id, text="–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É –≤–∏–∫–ª—é—á–µ–Ω–æ. üîï")


@dp.callback_query_handler(text="nextb", state="*")
async def nextprs_btn(callback: types.CallbackQuery):
    city8 = InlineKeyboardButton(text="–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª.", callback_data="7")
    city9 = InlineKeyboardButton(text="–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="11")
    city10 = InlineKeyboardButton(text="–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª.", callback_data="4")
    city11 = InlineKeyboardButton(text="–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª.", callback_data="1")
    city12 = InlineKeyboardButton(text="–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="13")
    city13 = InlineKeyboardButton(text="–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∞ –æ–±–ª.", callback_data="10")
    city14 = InlineKeyboardButton(text="–°—É–º—Å—å–∫–∞ –æ–±–ª.", callback_data="17")
    city15 = InlineKeyboardButton(text="–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="12")
    prev1_btn = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prewb")
    prev2_btn = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="nextb1")
    citichoose2 = InlineKeyboardMarkup(row_width=2).add(city8, city9, city10, city11, city12, city13, city14, city15,
                                                        prev1_btn, prev2_btn)
    await callback.message.edit_reply_markup(reply_markup=citichoose2)


@dp.callback_query_handler(text="nextb1", state="*")
async def nextprs_btn(callback: types.CallbackQuery):
    city16 = InlineKeyboardButton(text="–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª.", callback_data="22")
    city17 = InlineKeyboardButton(text="–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª.", callback_data="21")
    city18 = InlineKeyboardButton(text="–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="2")
    city19 = InlineKeyboardButton(text="–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="16")
    city20 = InlineKeyboardButton(text="–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="8")
    city21 = InlineKeyboardButton(text="–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª.", callback_data="18")
    city22 = InlineKeyboardButton(text="–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª.", callback_data="6")
    city23 = InlineKeyboardButton(text="–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª.", callback_data="23")
    prev1_btn = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prewb1")
    citichoose2 = InlineKeyboardMarkup(row_width=2).add(city16, city17, city18, city19, city20, city21, city22, city23,
                                                        prev1_btn)
    await callback.message.edit_reply_markup(reply_markup=citichoose2)


@dp.callback_query_handler(text="prewb1", state="*")
async def nextprs_btn(callback: types.CallbackQuery):
    city8 = InlineKeyboardButton(text="–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª.", callback_data="7")
    city9 = InlineKeyboardButton(text="–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="11")
    city10 = InlineKeyboardButton(text="–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª.", callback_data="4")
    city11 = InlineKeyboardButton(text="–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª.", callback_data="1")
    city12 = InlineKeyboardButton(text="–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="13")
    city13 = InlineKeyboardButton(text="–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∞ –æ–±–ª.", callback_data="10")
    city14 = InlineKeyboardButton(text="–°—É–º—Å—å–∫–∞ –æ–±–ª.", callback_data="17")
    city15 = InlineKeyboardButton(text="–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="12")
    prev1_btn = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prewb")
    prev2_btn = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="nextb1")
    citichoose2 = InlineKeyboardMarkup(row_width=2).add(city8, city9, city10, city11, city12, city13, city14, city15,
                                                        prev1_btn, prev2_btn)
    await callback.message.edit_reply_markup(reply_markup=citichoose2)


@dp.callback_query_handler(text="prewb", state="*")
async def prewprs_btn(callback: types.CallbackQuery):
    city = InlineKeyboardButton(text="–û–¥–µ—Å—å–∫–∞ –æ–±–ª.", callback_data="14")
    city1 = InlineKeyboardButton(text="–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="3")
    city2 = InlineKeyboardButton(text="–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="23")
    city3 = InlineKeyboardButton(text="–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="19")
    city4 = InlineKeyboardButton(text="–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª.", callback_data="5")
    city5 = InlineKeyboardButton(text="–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="15")
    city6 = InlineKeyboardButton(text="–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª.", callback_data="20")
    city7 = InlineKeyboardButton(text="–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª.", callback_data="9")
    next1_btn = InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data="nextb")
    citichoose2 = InlineKeyboardMarkup(row_width=2).add(city, city1, city2, city3, city4, city5, city6, city7,
                                                        next1_btn)
    await callback.message.edit_reply_markup(reply_markup=citichoose2)


@dp.callback_query_handler(state="*")
async def city_cd_handler(callback: types.CallbackQuery, state: FSMContext):
    city_url = alert.city_list.get(callback.data)
    await States.city_list.set()
    await state.update_data(city_list=city_url)

    city_id_callback = callback.data
    await States.city_state_id.set()
    await state.update_data(city_state_id=city_id_callback)
    await db.city_add(user_id=callback.from_user.id, city_id=city_id_callback)

    await callback.message.answer(
        text="–í–∏ –æ–±—Ä–∞–ª–∏ {} –æ–±–ª–∞—Å—Ç—å! –ú–µ–Ω—é –∑ –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∏–∂—á–µ.".format(city_url),
        reply_markup=btns.keyboard_plt)
    await States.geo_bomb.set()


@dp.message_handler(Text(equals="–¢–µ—Ö.–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ üõ†"), state="*")
async def back(message: types.Message):
    if message.text == "–¢–µ—Ö.–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ üõ†":
        keyboard_ban = types.InlineKeyboardMarkup()
        ban_button = types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏", url="https://t.me/Svidomiy_Admin")
        keyboard_ban.add(ban_button)
        await bot.send_message(message.from_user.id,
                               "–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é —á–∞—Ç-–±–æ—Ç—É –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∫–∞–∑–∞–Ω—ñ –Ω–∏–∂—á–µ.",
                               reply_markup=keyboard_ban)


@dp.message_handler(Text(equals="–ü–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞ üè•"), state="*")
async def back(message: types.Message):
    if message.text == "–ü–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞ üè•":
        await bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.",
                               reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–õ—é–¥–∏–Ω—ñ –ø–æ–≥–∞–Ω–æ"), state="*")
async def phone(message: types.Message):
    if message.text == "–õ—é–¥–∏–Ω—ñ –ø–æ–≥–∞–Ω–æ":
        pplbad = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_napad = types.KeyboardButton(text="–°–µ—Ä—Ü–µ–≤–∏–π –Ω–∞–ø–∞–¥ ‚ù§Ô∏è‚Äçü©π")
        button_svidomist = types.KeyboardButton(text="–ë–µ–∑ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ üß†")
        button_backa = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        pplbad.add(button_napad, button_svidomist, button_backa)
        await bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç:", reply_markup=pplbad)


@dp.message_handler(Text(equals="–ë–µ–∑ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ üß†"), state="*")
async def phone(message: types.Message):
    if message.text == "–ë–µ–∑ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ üß†":
        tako = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffo = types.KeyboardButton(text="–ù–µ —Ä–µ–∞–≥—É—î ‚ùå")
        button_takl = types.KeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ–≤(–ª–∞) ‚úÖ")
        button_backb = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        tako.add(button_ffo, button_takl, button_backb)
        await bot.send_message(message.from_user.id, '–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–µ—ó. –ì–æ–ª–æ—Å–Ω–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ: "–í–∏ –º–µ–Ω–µ —á—É—î—Ç–µ?"',
                               reply_markup=tako)


@dp.message_handler(Text(equals="–ù–µ —Ä–µ–∞–≥—É—î ‚ùå"), state="*")
async def phone(message: types.Message):
    if message.text == "–ù–µ —Ä–µ–∞–≥—É—î ‚ùå":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ —ó–¥–µ üöë")
        button_backc = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_backc)
        await bot.send_message(message.from_user.id,
                               '1. –ü–æ–∫–ª–∏—á—Ç–µ –æ—Ç–æ—á—É—é—á–∏—Ö –ª—é–¥–µ–π –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É. \n\n2. –í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 103 –∞–±–æ '
                               '–ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ–≥–æ—Å—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏. \n\n3. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ —à–≤–∏–¥–∫—ñ–π: –©–æ —Å—Ç–∞–ª–æ—Å—è. –î–µ '
                               '—Å—Ç–∞–ª–æ—Å—è. –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –≤—ñ–∫ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –°—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è '
                               '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞. –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ—Å–∏—Ç–∏ —Ç—Ä—É–±–∫—É –ø–µ—Ä—à–∏–º. \n\n4. –ü–æ–¥–±–∞–π—Ç–µ –ø—Ä–æ —Ç–µ, '
                               '—â–æ–± —à–≤–∏–¥–∫—É '
                               '–±—É–ª–æ –∫–æ–º—É –∑—É—Å—Ç—Ä—ñ—Ç–∏.',
                               reply_markup=takg)


@dp.message_handler(Text(equals="–®–≤–∏–¥–∫–∞ —ó–¥–µ üöë"), state="*")
async def phone(message: types.Message):
    if message.text == "–®–≤–∏–¥–∫–∞ —ó–¥–µ üöë":
        await bot.send_message(message.from_user.id, "–î—è–∫—É—î–º–æ, —â–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–∞–π–¥—É–∂–∏–º–∏.",
                               reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–í—ñ–¥–ø–æ–≤—ñ–ª–∞ ‚úÖ"), state="*")
async def phone(message: types.Message):
    if message.text == "–í—ñ–¥–ø–æ–≤—ñ–ª–∞ ‚úÖ":
        await bot.send_message(message.from_user.id, "–î—è–∫—É—î–º–æ, —â–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–∞–π–¥—É–∂–∏–º–∏.",
                               reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–°–µ—Ä—Ü–µ–≤–∏–π –Ω–∞–ø–∞–¥ ‚ù§Ô∏è‚Äçü©π"), state="*")
async def phone(message: types.Message):
    if message.text == "–°–µ—Ä—Ü–µ–≤–∏–π –Ω–∞–ø–∞–¥ ‚ù§Ô∏è‚Äçü©π":
        napad = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_tak = types.KeyboardButton(text="–¢–∞–∫ ‚úÖ")
        button_ni = types.KeyboardButton(text="–ù—ñ ‚ùå")
        button_backf = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        napad.add(button_tak, button_ni, button_backf)
        await bot.send_message(message.from_user.id,
                               "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î —Ç–∞–∫—ñ —Å–∏–º–ø—Ç–æ–º–∏: \n\n- –£—Å–∫–ª–∞–¥–Ω–µ–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è. \n\n- –ë—ñ–ª—å —É –≥—Ä—É–¥—è—Ö, "
                               "—â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ —à–∏—é, —Ä—É–∫—É, –∂–∏–≤—ñ—Ç. \n\n- –•–æ–ª–æ–¥–Ω–∏–π –ø—ñ—Ç, –≤—ñ–¥—á—É—Ç—Ç—è —Å—Ç—Ä–∞—Ö—É. \n\n–ß–∏ "
                               "–ø—Ä–∏—Å—É—Ç–Ω—ñ "
                               "—è–∫—ñ—Å—å –∑ —Ü–∏—Ö —Å–∏–º–ø—Ç–æ–º—ñ–≤?",
                               reply_markup=napad)


@dp.message_handler(Text(equals="–ù—ñ ‚ùå"), state="*")
async def phone(message: types.Message):
    if message.text == "–ù—ñ ‚ùå":
        await bot.send_message(message.from_user.id,
                               "–®–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ –ø—ñ–¥–æ–∑—Ä—é–≤–∞—Ç–∏ —Å–µ—Ä—Ü–µ–≤–∏–π –Ω–∞–ø–∞–¥ –Ω–µ –≤–∞—Ä—Ç–æ. \n\n–ü—Ä–æ—Ç–µ, —è–∫—â–æ —Å—É–º–Ω—ñ–≤–∞—î—Ç–µ—Å—è, "
                               "–∫—Ä–∞—â–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–≤–∞—Ç–∏—Å—è —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —à–≤–∏–¥–∫—É.",
                               reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–¢–∞–∫ ‚úÖ"), state="*")
async def phone(message: types.Message):
    if message.text == "–¢–∞–∫ ‚úÖ":
        tak = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_tak = types.KeyboardButton(text="–í–∏–∫–ª–∏–∫–∞–ª–∏ —à–≤–∏–¥–∫—É üè•")
        button_backd = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        tak.add(button_tak, button_backd)
        await bot.send_message(message.from_user.id,
                               "–í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É: \n\n1. –ü–æ–∫–ª–∏—á—Ç–µ –æ—Ç–æ—á—É—é—á–∏—Ö –ª—é–¥–µ–π –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É. \n\n2. –í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É "
                               "–ø–æ "
                               "—Ç–µ–ª–µ—Ñ–æ–Ω—É 103 –∞–±–æ –ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ–≥–æ—Å—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏. \n\n3. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ —à–≤–∏–¥–∫—ñ–π: –©–æ "
                               "—Å—Ç–∞–ª–æ—Å—è. –î–µ —Å—Ç–∞–ª–æ—Å—è. –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –≤—ñ–∫ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –°—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å "
                               "–Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞. –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ—Å–∏—Ç–∏ —Ç—Ä—É–±–∫—É –ø–µ—Ä—à–∏–º. \n\n4. –ü–æ–¥–±–∞–π—Ç–µ, "
                               "—â–æ–± —à–≤–∏–¥–∫—É –±—É–ª–æ –∫–æ–º—É –∑—É—Å—Ç—Ä—ñ—Ç–∏.",
                               reply_markup=tak)


@dp.message_handler(Text(equals="–í–∏–∫–ª–∏–∫–∞–ª–∏ —à–≤–∏–¥–∫—É üè•"), state="*")
async def phone(message: types.Message):
    if message.text == "–í–∏–∫–ª–∏–∫–∞–ª–∏ —à–≤–∏–¥–∫—É üè•":
        tak = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_tak = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë")
        button_sv = types.KeyboardButton(text="–í—Ç—Ä–∞—Ç–∞ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ")
        button_backg = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        tak.add(button_tak, button_sv, button_backg)
        await bot.send_message(message.from_user.id,
                               "–í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É: \n\n1. –ü–æ–∫–ª–∏—á—Ç–µ –æ—Ç–æ—á—É—é—á–∏—Ö –ª—é–¥–µ–π –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É. \n\n2. –í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É "
                               "–ø–æ "
                               "—Ç–µ–ª–µ—Ñ–æ–Ω—É 103 –∞–±–æ –ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ–≥–æ—Å—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏. \n\n3. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ —à–≤–∏–¥–∫—ñ–π: –©–æ "
                               "—Å—Ç–∞–ª–æ—Å—è. –î–µ —Å—Ç–∞–ª–æ—Å—è. –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –≤—ñ–∫ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –°—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å "
                               "–Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞. –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ—Å–∏—Ç–∏ —Ç—Ä—É–±–∫—É –ø–µ—Ä—à–∏–º. \n\n4. –ü–æ–¥–±–∞–π—Ç–µ, "
                               "—â–æ–± —à–≤–∏–¥–∫—É –±—É–ª–æ –∫–æ–º—É –∑—É—Å—Ç—Ä—ñ—Ç–∏.",
                               reply_markup=tak)


@dp.message_handler(Text(equals="–í—Ç—Ä–∞—Ç–∞ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ"), state="*")
async def phone(message: types.Message):
    if message.text == "–í—Ç—Ä–∞—Ç–∞ —Å–≤—ñ–¥–æ–º–æ—Å—Ç—ñ":
        hhtak = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_tak = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë")
        button_backh = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        hhtak.add(button_tak, button_backh)
        with open("gif/unconsciousPosition.mp4", 'rb') as polozhenia:
            await bot.send_animation(chat_id=message.from_user.id, animation=polozhenia)
        await bot.send_message(message.from_user.id, "–ü–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –ª—é–¥–∏–Ω—É –≤ –±–µ–∑–ø–µ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ —á–µ–∫–∞–π—Ç–µ –ø—Ä–∏—ó–∑–¥—É —à–≤–∏–¥–∫–æ—ó.",
                               reply_markup=hhtak)


@dp.message_handler(Text(equals="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë"), state="*")
async def phone(message: types.Message):
    if message.text == "–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë":
        await bot.send_message(message.from_user.id, "–î—è–∫—É—î–º–æ, —â–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–∞–π–¥—É–∂–∏–º–∏.",
                               reply_markup=btns.keyboard_aid)


@dp.message_handler(Text(equals="–£ –ª—é–¥–∏–Ω–∏ —Ç—Ä–∞–≤–º–∞"), state="*")
async def phone(message: types.Message):
    if message.text == "–£ –ª—é–¥–∏–Ω–∏ —Ç—Ä–∞–≤–º–∞":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–°–∏–ª—å–Ω–∞ –∫—Ä–æ–≤–æ—Ç–µ—á–∞ ü©∏")
        button_ffh = types.KeyboardButton(text="–ó–ª–∞–º–∞–ª–∞ –∫—ñ–Ω—Ü—ñ–≤–∫—É ü¶¥")
        button_backi = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_ffh, button_backi)
        await bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç:", reply_markup=takg)


@dp.message_handler(Text(equals="–°–∏–ª—å–Ω–∞ –∫—Ä–æ–≤–æ—Ç–µ—á–∞ ü©∏"), state="*")
async def phone(message: types.Message):
    if message.text == "–°–∏–ª—å–Ω–∞ –∫—Ä–æ–≤–æ—Ç–µ—á–∞ ü©∏":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–ó—É–ø–∏–Ω–∏–ª–∞—Å—è ‚úÖ")
        button_ffh = types.KeyboardButton(text="–ù–µ –∑—É–ø–∏–Ω–∏–ª–∞—Å—è ‚ùå")
        button_backj = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_ffh, button_backj)
        await bot.send_message(message.from_user.id,
                               "1. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–æ–≥–æ —â—ñ–ª—å–Ω–æ –ø—Ä–∏—Ç–∏—Å–Ω—É—Ç–∏ —Ä–∞–Ω—É —Ä—É–∫–æ—é. –¶–µ –ø–æ–≤–∏–Ω–Ω–æ —É–ø–æ–≤—ñ–ª—å–Ω–∏—Ç–∏ "
                               "–∫—Ä–æ–≤–æ—Ç–µ—á—É. \n\n2. –ü–æ–∫–ª–∏—á—Ç–µ –æ—Ç–æ—á—É—é—á–∏—Ö –ª—é–¥–µ–π –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É. \n\n3. –í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É –ø–æ "
                               "—Ç–µ–ª–µ—Ñ–æ–Ω—É "
                               "103 –∞–±–æ –ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ–≥–æ—Å—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏. \n\n4. –ü–æ–≤—ñ–¥–æ–º—Ç–µ —à–≤–∏–¥–∫—ñ–π: –©–æ —Å—Ç–∞–ª–æ—Å—è. –î–µ —Å—Ç–∞–ª–æ—Å—è. "
                               "–ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –≤—ñ–∫ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –°—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞. "
                               "–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ—Å–∏—Ç–∏ —Ç—Ä—É–±–∫—É –ø–µ—Ä—à–∏–º. \n\n5. –ü–æ–¥–±–∞–π—Ç–µ, —â–æ–± —à–≤–∏–¥–∫—É –±—É–ª–æ –∫–æ–º—É "
                               "–∑—É—Å—Ç—Ä—ñ—Ç–∏. "
                               "–ö—Ä–æ–≤–æ—Ç–µ—á–∞ –∑—É–ø–∏–Ω–∏–ª–∞—Å—è?",
                               reply_markup=takg)


@dp.message_handler(Text(equals="–ó–ª–∞–º–∞–ª–∞ –∫—ñ–Ω—Ü—ñ–≤–∫—É ü¶¥"), state="*")
async def phone(message: types.Message):
    if message.text == "–ó–ª–∞–º–∞–ª–∞ –∫—ñ–Ω—Ü—ñ–≤–∫—É ü¶¥":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë")
        button_backk = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_backk)
        await bot.send_message(message.from_user.id,
                               "–ü–æ–ø—Ä–æ—Å—ñ—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ –Ω–µ —Ä—É—Ö–∞—Ç–∏—Å—è. \n\n1. –ü—ñ–¥–∫–ª–∞–¥—ñ—Ç—å –º'—è–∫—É —Ç–∫–∞–Ω–∏–Ω—É –ø—ñ–¥ –∑–ª–∞–º–∞–Ω—É "
                               "–∫—ñ–Ω—Ü—ñ–≤–∫—É, "
                               "–∑–∞–±–µ–∑–ø–µ—á–∏–≤—à–∏ —Ü–∏–º –∫–æ–º—Ñ–æ—Ä—Ç –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. \n\n2. –Ø–∫—â–æ –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏–π –∑–ª–∞–º–∞–≤ —Ä—É–∫—É —ñ –≤—ñ–Ω –≤ –∑–º–æ–∑—ñ "
                               "–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ó—ó –∑–¥–æ—Ä–æ–≤–æ—é —Ä—É–∫–æ—é - –Ω–µ –∑–∞–≤–∞–∂–∞–π—Ç–µ —Ü—å–æ–º—É. \n\n3. –ù–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è –≤–ø—Ä–∞–≤–∏—Ç–∏ "
                               "–ø–µ—Ä–µ–ª–æ–º –∞–±–æ –Ω–∞–∫–ª–∞—Å—Ç–∏ —à–∏–Ω—É. –¶–µ –º–æ–∂–µ –Ω–∞—à–∫–æ–¥–∏—Ç–∏. \n\n4. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —à–≤–∏–¥–∫–∞ —ó–¥–µ —ñ "
                               "—ó—ó —î "
                               "–∫–æ–º—É –∑—É—Å—Ç—Ä—ñ—Ç–∏. \n\n5. –ü—Ä–∏–∫–ª–∞–¥—ñ—Ç—å —á–µ—Ä–µ–∑ —Ç–∫–∞–Ω–∏–Ω—É —Ö–æ–ª–æ–¥ –¥–æ –º—ñ—Å—Ü—è –ø–µ—Ä–µ–ª–æ–º—É –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ "
                               "–Ω–∞ "
                               "20 —Ö–≤–∏–ª–∏–Ω. –Ø–∫—â–æ —à–≤–∏–¥–∫–∞ —â–µ –Ω–µ –ø—Ä–∏—ó—Ö–∞–ª–∞: \n\n1. –ó–∞–ø–∏—à—ñ—Ç—å —ñ–º'—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. "
                               "\n\n2. "
                               "–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∏ –π–æ–≥–æ –±–ª–∏–∑—å–∫–∏—Ö, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤–∏–ø–∞–¥–æ–∫. \n\n3. –ü–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ "
                               "–¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—Ä–∏—ó–∑–¥—É —à–≤–∏–¥–∫–æ—ó. \n\n4. –†–æ–∑–º–æ–≤–ª—è–π—Ç–µ –∑ –Ω–∏–º.",
                               reply_markup=takg)


@dp.message_handler(Text(equals="–ó—É–ø–∏–Ω–∏–ª–∞—Å—è ‚úÖ"), state="*")
async def phone(message: types.Message):
    if message.text == "–ó—É–ø–∏–Ω–∏–ª–∞—Å—è ‚úÖ":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë")
        button_backl = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_backl)
        await bot.send_message(message.from_user.id,
                               "1. –ó–∞–ø–∏—à—ñ—Ç—å —ñ–º'—è —ñ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. \n\n2. –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∏ –π–æ–≥–æ –±–ª–∏–∑—å–∫–∏—Ö, "
                               "—â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –≤–∏–ø–∞–¥–æ–∫. \n\n3. –ü–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—Ä–∏—ó–∑–¥—É —à–≤–∏–¥–∫–æ—ó. 4. "
                               "–†–æ–∑–º–æ–≤–ª—è–π—Ç–µ –∑ –Ω–∏–º.",
                               reply_markup=takg)


@dp.message_handler(Text(equals="–ù–µ –∑—É–ø–∏–Ω–∏–ª–∞—Å—è ‚ùå"), state="*")
async def phone(message: types.Message):
    if message.text == "–ù–µ –∑—É–ø–∏–Ω–∏–ª–∞—Å—è ‚ùå":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ –ø—Ä–∏—ó—Ö–∞–ª–∞ üöë")
        button_backm = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_backm)
        with open("gif/bleedingPressSource.mp4", 'rb') as krov:
            await bot.send_animation(chat_id=message.from_user.id, animation=krov)
        await bot.send_message(message.from_user.id,
                               "1. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞–¥—ñ–Ω—å—Ç–µ –º–µ–¥–∏—á–Ω—ñ —Ä—É–∫–∞–≤–∏—á–∫–∏ –∞–±–æ —ó—Ö –∞–Ω–∞–ª–æ–≥. \n\n2. –©—ñ–ª—å–Ω–æ –ø—Ä–∏—Ç–∏—Å–Ω—ñ—Ç—å —Ä–∞–Ω—É "
                               "—Å–≤–æ—î—é —Ä—É–∫–æ—é. –¢–∏—Å–Ω—ñ—Ç—å –ø—Ä—è–º–æ —Ç—É–¥–∏, –∑–≤—ñ–¥–∫–∏ —Ç–µ—á–µ –∫—Ä–æ–≤. \n\n3. –Ø–∫—â–æ –ø–æ—Ä—É—á —î –ª—é–¥–∏, "
                               "–ø–æ–ø—Ä–æ—Å—ñ—Ç—å –ø—Ä–∏–Ω–µ—Å—Ç–∏ –±–∏–Ω—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ —à–º–∞—Ç–æ–∫ —á–∏—Å—Ç–æ—ó —Ç–∫–∞–Ω–∏–Ω–∏ (—Ñ—É—Ç–±–æ–ª–∫–∞, —Ä—É—à–Ω–∏–∫, "
                               "–ø—Ä–æ—Å—Ç–∏—Ä–∞–¥–ª–æ —ñ —Ç.–¥.). \n\n4. –ó—ñ–º'—è–≤—à–∏ —Ç–∫–∞–Ω–∏–Ω—É, —Å–∏–ª—å–Ω–æ –ø—Ä–∏—Ç–∏—Å–Ω—ñ—Ç—å —Ä–∞–Ω—É. –Ø–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ "
                               "–≤—ñ–¥–µ–æ.",
                               reply_markup=takg)


@dp.message_handler(Text(equals="–ù–µ —Ä–µ–∞–≥—É—î ‚ùå"), state="*")
async def phone(message: types.Message):
    if message.text == "–ù–µ —Ä–µ–∞–≥—É—î ‚ùå":
        takg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button_ffg = types.KeyboardButton(text="–®–≤–∏–¥–∫–∞ —ó–¥–µ üöë")
        button_backn = types.KeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
        takg.add(button_ffg, button_backn)
        await bot.send_message(message.from_user.id,
                               '1. –ü–æ–∫–ª–∏—á—Ç–µ –æ—Ç–æ—á—É—é—á–∏—Ö –ª—é–¥–µ–π –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É. \n\n2. –í–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 103 –∞–±–æ '
                               '–ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ–≥–æ—Å—å —Ü–µ –∑—Ä–æ–±–∏—Ç–∏. \n\n3. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ —à–≤–∏–¥–∫—ñ–π: –©–æ —Å—Ç–∞–ª–æ—Å—è. –î–µ '
                               '—Å—Ç–∞–ª–æ—Å—è. –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π –≤—ñ–∫ –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –°—Ç–∞—Ç—å –ø–æ—Ç–µ—Ä–ø—ñ–ª–æ–≥–æ. –î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è '
                               '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞. –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤—ñ—Å–∏—Ç–∏ —Ç—Ä—É–±–∫—É –ø–µ—Ä—à–∏–º. \n\n4. –ü–æ–¥–±–∞–π—Ç–µ –ø—Ä–æ —Ç–µ, '
                               '—â–æ–± —à–≤–∏–¥–∫—É '
                               '–±—É–ª–æ –∫–æ–º—É –∑—É—Å—Ç—Ä—ñ—Ç–∏.',
                               reply_markup=takg)


def poll_alerts():
    url = 'https://alerts.com.ua/api/states'
    headers = alert.headers

    while True:
        time.sleep(10)
        req = requests.get(url=url, headers=headers).json()

        alarm_dict2 = {}
        alarm_dict = {city['id']: city['alert'] for city in req['states']}

        if alarm_dict2 != alarm_dict:
            diff = [key for key in alarm_dict if key in alarm_dict2 and alarm_dict[key] != alarm_dict2[key]]
            print(diff)

            for id in diff:
                res = db.cur.execute("SELECT user_id FROM users WHERE city_id=%s", (str(id),))
                id_list_changes = db.cur.fetchall()

                for user_id in id_list_changes:
                    if alarm_dict[id] is False:
                        print(user_id[0], '–í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏')
                    elif alarm_dict[id] is True:
                        print(user_id[0], '–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞')
            alarm_dict2 = alarm_dict


thread = threading.Thread(target=poll_alerts)
thread.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
